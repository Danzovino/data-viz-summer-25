{
  "hash": "a1c2405a7672359868600cfa3a52e168",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Visualization: Day 1\"\nauthor: \"Erik Westlund\"\ndate: \"2025-06-02\"\ndate-modified: \"2025-06-09\"\n---\n\n# Welcome to Data Visualization\n\n## Housekeeping\n\n::: {.incremental}\n- Who am I?\n- Contact information\n- Course materials\n:::\n\n## Who am I?\n\n- I am a data scientist at the Johns Hopkins Bloomberg School of Public Health\n- I work out of the Johns Hopkins Biostatistics Center in the Department of Biostatistics\n- I was trained in the social sciences and have worked profesionally as a data scientist and software developer for over 10 years\n\n## Contact information\n\n- Email: ewestlund@jhu.edu\n\n## Course materials\n\n- [Course GitHub repository](https://github.com/erikwestlund/data-viz-summer-25): <br>\n  https://github.com/erikwestlund/data-viz-summer-25\n- [CoursePlus Website](https://courseplus.jhu.edu/core/index.cfm/go/course.home/coid/23902/): <br>\n  https://courseplus.jhu.edu/core/index.cfm/<br>go/course.home/coid/23902/\n\n## Course Goals\n\n::: {.incremental}\n- Understanding of core data visualization concepts\n- Develop strong data science & data visualization workflows\n- Learn to produce high-quality data visualizations\n- Learn to communicate effectively with and about data visualizations\n:::\n\n## Course Outline\n\n::: {.incremental}\n- Introduction to data visualization\n- Tooling & worfklow\n- Data preparation\n- Grammar of graphics\n- Making good, honest graphics\n- Dashboards\n:::\n\n# Introduction to Data Visualization\n\n## Edward Tufte: Graphical Excellence is....\n\n::: {.columns}\n::: {.column width=\"50%\"}\n![Edward Tufte](images/tufte.jpg)\n:::\n\n::: {.column width=\"50%\"}\n\n> \"Graphical excellence is the well-designed presentation of interesting dataâ€”a matter of substance, of statistics, and of design...\"\n\n*Edward Tufte, The Visual Display of Quantitative Information, 1983*\n\n:::\n:::\n\n## Dense\n\n::: {.columns}\n::: {.column width=\"50%\"}\n![Edward Tufte](images/tufte.jpg)\n:::\n\n::: {.column width=\"50%\"}\n\n> \"It is that which gives to the view the great number of ideas in the shortest time with the least ink in the smallest space...\"\n\n*Edward Tufte, The Visual Display of Quantitative Information, 1983*\n\n:::\n:::\n\n## Multivariate\n\n::: {.columns}\n::: {.column width=\"50%\"}\n![Edward Tufte](images/tufte.jpg)\n:::\n\n::: {.column width=\"50%\"}\n\n> \"It is nearly always multivariate...\"\n\n*Edward Tufte, The Visual Display of Quantitative Information, 1983*\n\n:::\n:::\n\n## Truthful\n\n::: {.columns}\n::: {.column width=\"50%\"}\n![Edward Tufte](images/tufte.jpg)\n:::\n\n::: {.column width=\"50%\"}\n\n> \"Graphical excellence requires telling the truth about the data...\"\n\n*Edward Tufte, The Visual Display of Quantitative Information, 1983*\n\n:::\n:::\n\n## Exemplar: Napoleon's March\n\n\n![Charles Minard's Napoleon's March](images/minard_napoleon.png)\n\n\n## Achieving Minard's Graphical Excellence\n\n> \"[Minard's classic image] can be described and admired, but there are no compositional principles on how to create that one wonder graphic in a million.\"\"\n\n*Edward Tufte, The Visual Display of Quantitative Information, 1983*\n\n## For The Rest of Us \n\nInstead, Tufte suggests:\n\n::: {.incremental}\n* \"[For] more routine, workaday designs\"\n* \"[Have] a properly chosen format and design\"\n* \"Use words, numbers, and drawing together\"\n* \"[D]isplay an accessible complexity of detail\" \n* \"Avoid content-free decoration, including chartjunk\"\n:::\n\nWe will revisit more of Tufte's principles throughout the course.\n\n# Tooling & Workflow\n\n* It is worth investing in learning your tools\n* A good data visualization workflow requires good tooling and workflow\n* Below we will discuss some of the tools we will use in this course and why we use them\n\n## Required Software For This Course\n\n## R\n\n::: {.columns}\n\n::: {.column width=\"75%\"}\n* We will rely mostly on R for this course\n* R can be downloaded from [r-project.org](https://www.r-project.org/)\n:::\n\n::: {.column width=\"25%\"}\n\n![R Logo](images/r.png)\n:::\n\n:::\n\n\n## `ggplot2`\n\n::: {.columns}\n\n::: {.column width=\"75%\"}\n* `ggplot2` is a powerful package for creating data visualizations\n* It is built on the grammar of graphics\n* It is a declarative grammar for data visualization\n:::\n\n::: {.column width=\"25%\"}\n![ggplot2 Logo](images/ggplot2.png)\n:::\n\n:::\n\n## git\n\n::: {.columns}\n\n::: {.column width=\"75%\"}\n* `git` is a powerful tool for version control\n* It allows you to \n  * track changes to your code\n  * revert to previous versions of your code\n  * collaborate with others on your code\n  * maintain multiple branches/versions of your code\n  * and more\n:::\n\n::: {.column width=\"25%\"}\n![git Logo](images/git.png)\n:::\n\n:::\n\n## GitHub\n\n::: {.columns}\n\n::: {.column width=\"75%\"}\n* `git` is not GitHub\n* GitHub is a web-based platform for hosting and collaborating on code\n* It is technically a remote repository for `git`\n* It gives you a place to store your code and collaborate with others\n* It is free for open source projects\n:::\n\n::: {.column width=\"25%\"}\n![GitHub Logo](images/github.png)\n:::\n\n:::\n\n## Scientific Notebooks\n\n::: {.columns}\n\n::: {.column width=\"75%\"}\n* Notebooks are a powerful way to work with data and do data visualization\n* They allow you to embed code, text, and visualizations in a single document\n* They thus allow you to easily share both the process and the results of your work\n* I do not require a specific notebook system for this course, but I will be using Quarto for examples\n:::\n\n::: {.column width=\"25%\"}\n![Notebook Logo](images/lab-notebook.jpg)\n:::\n\n:::\n\n## Notebooks: Quarto\n\n::: {.columns}\n\n::: {.column width=\"75%\"}\n* Quarto is an open source scientific and technical publishing system\n* You can create reports, websites, presentations, and books with Quarto\n* This presentation is built with Quarto\n* You can embed Python, R, and other code in in plaintext Quarto documents\n* Quarto renders down to a document in HTML, PDF, or Word format\n:::\n\n::: {.column width=\"25%\"}\n![Quarto Logo](images/quarto.png)\n:::\n\n:::\n\n## RMarkdown\n\n::: {.columns}\n\n::: {.column width=\"75%\"}\n* RMarkdown is a way to create documents that mix R code and text\n* It integrates with RStudio well and has a very similar workflow to Quarto\n* RMarkdown renders down to a document in HTML, PDF, or Word format; the files them selves are plain text\n* Easy to store notebooks in version control with git\n:::\n\n::: {.column width=\"25%\"}\n![RMarkdown Logo](images/rmarkdown.png)\n:::\n\n:::\n\n## Jupyter \n\n::: {.columns}\n\n::: {.column width=\"75%\"}\n* Jupyter is a notebook system popular with Python users\n* Jupyter stores code and results in the same document (Quarto/RMarkdown render into a separate document)\n* Jupyter supports R and other languages\n* Jupyter stores itself as JSON (javascript object notation) files and are not as easy to diff in git\n:::\n\n::: {.column width=\"25%\"}\n![Jupyter Logo](images/jupyter.png)\n:::\n\n:::\n\n\n## Optional/Popular Software\n\n\n## RStudio\n\n::: {.columns}\n\n::: {.column width=\"75%\"}\n* RStudio is a powerful IDE for R\n* It is free and open source\n* It helps you understand what is in your environment (e.g., variables, functions, packages, etc.)\n* It also makes it easy to view your visualizations as you make them\n:::\n\n::: {.column width=\"25%\"}\n![RStudio Logo](images/rstudio.png)\n:::\n\n:::\n\n## Python\n\n::: {.columns}\n\n::: {.column width=\"75%\"}\n* Python is a powerful general purpose programming language that is very popular in the data science community, especially in machine learning\n* It has A-tier data management and scientific computing libraries, such as `pandas` and `numpy`\n* It has a large ecosystem of packages for data visualization, including `matplotlib` and `seaborn`\n:::\n\n::: {.column width=\"25%\"}\n![Python Logo](images/python.png)\n:::\n\n:::\n\n## LLMs\n\n::: {.columns}\n\n::: {.column width=\"75%\"}\n* LLMs are commonly used to help with code\n* Common ones used in data science are ChatGPT, Claude, Gemini, and GitHub's Copilot\n* They can help you write code, debug code, and write documentation\n* They can also make mistakes, so you cannot blindly trust their work\n:::\n\n::: {.column width=\"25%\"}\n![GitHub Copilot Logo](images/copilot.png)\n:::\n\n:::\n\n# AI, LLMs, and Data Visualization\n\n## AI and Data Visualization\n\n* AI and LLMs are becoming more and more powerful\n* They can help you with many data-related tasks, but require care\n* They are allowed in this course, but you are responsible for checking their work\n\n## My Philosophy\n\n* I use LLMs in nearly all aspects of my work\n* I have found that there is now less value in being able to \"make computer do something\" and more in high level concepts\n* To that extent, in this course we will try to focus a little more on concepts and less on `ggplot2` syntax, since LLMs really can mostly solve technical visualization problems\n\n\n# Project Organization & Tooling\n\n## Before We Do Actual Visualization\n\n* I am spending a lot of time on tools and organization\n* This may seem off-topic, but I assure you it is not\n* Efficient workflows and reproducible work are key to success in data science\n\n## Benefits Of Being Organized \n\n* **Efficiency**: Find files quickly\n* **Reproducibility**: Others can follow your work\n* **Collaboration**: Team members understand your structure\n* **Maintenance**: Easier to update and fix issues\n* **Scalability**: Structure grows with your project\n\n## Naming Convention Challenges\n\n* Files need to be:\n  * Easy to find\n  * Easy to understand\n  * Easy to sort\n  * Easy to version control\n\n* Common problems:\n  * Unclear file purposes\n  * Inconsistent naming\n  * Missing execution order\n  * Lost files in nested directories\n  * Confusion about latest versions\n\n## Course Naming Conventions\n\nI recommend these conventions:\n\n```\nwork/\nâ”œâ”€â”€ example_*         # Learning examples\nâ”œâ”€â”€ ps1_*             # Problem set 1\nâ”œâ”€â”€ ps2_*             # Problem set 2\nâ”œâ”€â”€ ps3_*             # Problem set 3\nâ”œâ”€â”€ final_project_*   # Final project\nâ”œâ”€â”€ shared_*          # Shared resources\nâ””â”€â”€ data/             # Data directory\n```\n\n* Prefixes indicate purpose\n* Numbers show execution order\n* It is a best practice to document your structure in a README\n\n## Real-World Flexibility\n\n* These conventions are a starting point\n* Real projects often need:\n  * Different structures for different teams\n  * Adaptation as projects grow\n  * Balance between consistency and flexibility\n  * Documentation of changes\n\n## Directory Structure Options\n\n1. Flat Structure:\n   ```\n   work/\n   â”œâ”€â”€ data_prep.qmd\n   â”œâ”€â”€ analysis.qmd\n   â””â”€â”€ data/\n   ```\n\n2. Nested Structure:\n   ```\n   work/\n   â”œâ”€â”€ data_prep/\n   â”‚   â””â”€â”€ data_prep.qmd\n   â”œâ”€â”€ analysis/\n   â”‚   â””â”€â”€ analysis.qmd\n   â””â”€â”€ data/\n   ```\n\n## The Challenge of Subfolders\n\n::: {.callout-warning}\n## Relative Paths are Tricky!\n\n* Files in subfolders need to reference parent directories\n* Paths like `../../data/file.csv` are:\n  * Error-prone\n  * Hard to maintain\n  * Break when moving files\n  * Confusing to read\n:::\n\n## The `.Rproj` File\n\n* Defines your project root\n* Sets the working directory\n* Stores project settings\n* Makes paths relative to project root\n* Essential for project portability\n\n## The `here` Package\n\n```r\nlibrary(here)\n\n# Instead of \"../../data/file.csv\"\nread_csv(here(\"data\", \"file.csv\"))\n```\n\n* Builds paths from project root\n* Works from any subfolder\n* More readable than `../`\n* More maintainable\n\n## Benefits of Good Path Management\n\n* Paths work from anywhere\n* No more `../` counting\n* More maintainable\n* More portable\n* Easier collaboration\n\n### When to Change Structure?\n\n* As project complexity grows\n* When working with multiple datasets\n* When collaborating with others\n* When sharing code with different audiences\n\n\n# Getting Started with RStudio, Projects, Quarto, and `git`\n\n## Goals\n\n* Learn the data science workflow: RStudio, projects, Quarto, and `git`\n* Set up your course workspace\n* Create your first notebook\n\n## Fork/Open the Course Repository\n\n1. Fork the course repo on GitHub\n2. In RStudio: File -> New Project -> Version Control -> Git\n3. Paste your fork URL and create\n\n## Exploring the Example Project\n\n1. Open `examples/project-example/`\n2. Notice the structure:\n   - `_quarto.yml` for configuration\n   - Numbered notebooks\n   - `data/` directory\n   - `.gitignore`\n\n## Setting Up Your Work Directory\n\n1. Create new project in `work/` using RStudio (File -> New Project -> New Directory -> New Project)\n2. Name it \"data-viz-work\"\n3. Enable git repository\n\n## Your Work Directory\n\n::: {.callout-note}\n## Important!\n\nThe `work/` directory is your personal workspace for **everything** in this course:\n\n* All homework assignments\n* Course projects\n* Learning examples\n* Your final project\n\n**You are responsible for:**\n\n* Keeping your work organized\n* Following the naming conventions\n* Maintaining a clean project structure\n* Documenting your organization in README\n\nThis is your space - keep it clean and organized!\n:::\n\n## Configuring Your Project (1/2)\n\nLet's get a file set up to work with Quarto and have data to read from.\n\n1. Copy `example_project_quarto.yml` from `examples` to `_quarto.yml` in your new project\n2. Create `data/` directory\n\n## Configuring Your Project (2/2)\n\nWe are now going to create a file called `.gitignore` to tell git to ignore certain files.\n\n1. Create a file called `.gitignore` (if it doesn't already exist)\n\n\n## Understanding `.gitignore`\n\n::: {.callout-warning}\n## Never Commit Sensitive Data!\n\n* `.gitignore` tells Git which files to ignore\n* Critical for:\n  * Protecting sensitive data\n  * Preventing accidental commits\n  * Keeping repositories clean\n:::\n\n## Why `.gitignore` Matters\n\n* **Data Privacy**:\n  * Health data is sensitive\n  * Patient information must be protected\n  * Legal requirements (HIPAA, etc.)\n  * Ethical obligations\n\n* **Repository Health**:\n  * Prevents large binary files\n  * Avoids temporary files\n  * Keeps repository size manageable\n  * Makes collaboration easier\n\n## Our `.gitignore` Setup\n\n```\n# Data directory\ndata/\n\n# R specific\n.Rproj.user\n.Rhistory\n.RData\n```\n\n* `data/`: Keeps all data files local\n* `.Rproj.user`: RStudio temporary files\n* `.Rhistory`: Command history\n* `.RData`: R workspace files\n\n## Creating Your First Notebook\n\n1. In RStudio:\n   * Click File -> New File -> Quarto Document\n   * In the dialog:\n     - Title: \"Data Preparation Example\"\n     - Author: Your Name\n     - Format: HTML\n     - Template: Default\n   * Click \"Create\"\n   * Save as `example_data_prep.qmd` in your `work/` directory\n\n2. The YAML header will be automatically created:\n   ```yaml\n   ---\n   title: \"Data Preparation Example\"\n   author: \"Your Name\"\n   date: \"2025-06-09\"\n   format: html\n   ---\n   ```\n\n## Data Preparation\n\nLet's  Create a data preparation file.\n\nInclude this as a setup block:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(readr)\n```\n:::\n\n\nAnd then this to load and prepare the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load and prepare data\nmtcars_clean <- mtcars |>\n  mutate(\n    car_name = rownames(mtcars),\n    efficiency = mpg / wt\n  )\n\n# Save processed data\nwrite_csv(mtcars_clean, \"data/mtcars_clean.csv\")\n```\n:::\n\n\n## Creating Analysis Notebook\n\n1. Create `example_analysis.qmd`\n2. Add YAML header:\n   ```yaml\n   ---\n   title: \"Data Analysis Example\"\n   author: \"Your Name\"\n   date: \"2025-06-09\"\n   ---\n   ```\n\n## Data Analysis\n\n\n::: {.cell}\n\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load processed data\nmtcars_clean <- read_csv(\"data/mtcars_clean.csv\")\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars_clean, aes(x = wt, y = mpg)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  labs(\n    title = \"Fuel Efficiency vs Weight\",\n    x = \"Weight (1000 lbs)\",\n    y = \"Miles per Gallon\"\n  )\n```\n:::\n\n\n## Version Control Setup (1/2)\n\n1. Create new repository on GitHub:\n   - Go to github.com\n   - Click \"New repository\"\n   - Name it \"data-viz-work\"\n   - Don't initialize with README\n\n2. Connect local to remote:\n   ```bash\n   git remote add origin https://github.com/YOUR-USERNAME/data-viz-work.git\n   git branch -M main\n   ```\n\n## Version Control Setup (2/2)\n\n3. First commit and push:\n   ```bash\n   git add .\n   git commit -m \"Initial project setup\"\n   git push -u origin main\n   ```\n\n## Version Control Workflow\n\nFor future changes:\n1. Stage changes: `git add .`\n2. Commit: `git commit -m \"Description of changes\"`\n3. Push: `git push`\n\n## Next Steps\n\n* Your workspace is ready in `work/`\n* You can pull course updates\n* Your work is version controlled",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}